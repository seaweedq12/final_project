[{"C:\\Users\\aldur\\Desktop\\final_project\\client\\src\\index.js":"1","C:\\Users\\aldur\\Desktop\\final_project\\client\\src\\App.js":"2","C:\\Users\\aldur\\Desktop\\final_project\\client\\src\\pages\\Home.js":"3","C:\\Users\\aldur\\Desktop\\final_project\\client\\src\\components\\navbar\\index.js":"4","C:\\Users\\aldur\\Desktop\\final_project\\client\\src\\components\\Login\\LoginForm.js":"5","C:\\Users\\aldur\\Desktop\\final_project\\client\\src\\components\\Login\\SignupForm.js":"6","C:\\Users\\aldur\\Desktop\\final_project\\client\\src\\utils\\auth.js":"7","C:\\Users\\aldur\\Desktop\\final_project\\client\\src\\utils\\mutations.js":"8","C:\\Users\\aldur\\Desktop\\final_project\\client\\src\\utils\\queries.js":"9","C:\\Users\\aldur\\Desktop\\final_project\\client\\src\\components\\ProductList\\index.js":"10","C:\\Users\\aldur\\Desktop\\final_project\\client\\src\\components\\Myinfobar\\index.js":"11","C:\\Users\\aldur\\Desktop\\final_project\\client\\src\\components\\MyinfoList\\index.js":"12","C:\\Users\\aldur\\Desktop\\final_project\\client\\src\\components\\OrderList\\index.js":"13","C:\\Users\\aldur\\Desktop\\final_project\\client\\src\\pages\\MyAccount.js":"14","C:\\Users\\aldur\\Desktop\\final_project\\client\\src\\components\\Navbar\\index.js":"15","C:\\Users\\aldur\\Desktop\\final_project\\client\\src\\pages\\Cart.js":"16","C:\\Users\\aldur\\Desktop\\final_project\\client\\src\\components\\CartList\\index.js":"17","C:\\Users\\aldur\\Desktop\\final_project\\client\\src\\pages\\Success.js":"18","C:\\Users\\aldur\\Desktop\\final_project\\client\\src\\components\\Jumbotron\\index.js":"19"},{"size":266,"mtime":1635746197450,"results":"20","hashOfConfig":"21"},{"size":1385,"mtime":1635850630484,"results":"22","hashOfConfig":"21"},{"size":714,"mtime":1636013336958,"results":"23","hashOfConfig":"21"},{"size":2624,"mtime":1635395923157,"results":"24","hashOfConfig":"21"},{"size":2552,"mtime":1635243573140,"results":"25","hashOfConfig":"21"},{"size":4088,"mtime":1635559974907,"results":"26","hashOfConfig":"21"},{"size":1043,"mtime":1634783848840,"results":"27","hashOfConfig":"21"},{"size":1229,"mtime":1635760357011,"results":"28","hashOfConfig":"21"},{"size":658,"mtime":1635842386700,"results":"29","hashOfConfig":"21"},{"size":1519,"mtime":1636014161711,"results":"30","hashOfConfig":"21"},{"size":965,"mtime":1635395725505,"results":"31","hashOfConfig":"21"},{"size":657,"mtime":1635560234772,"results":"32","hashOfConfig":"21"},{"size":972,"mtime":1636014933890,"results":"33","hashOfConfig":"21"},{"size":1274,"mtime":1635412278886,"results":"34","hashOfConfig":"21"},{"size":2565,"mtime":1635846585588,"results":"35","hashOfConfig":"21"},{"size":457,"mtime":1635752675968,"results":"36","hashOfConfig":"21"},{"size":2278,"mtime":1636011784970,"results":"37","hashOfConfig":"21"},{"size":1282,"mtime":1636011393502,"results":"38","hashOfConfig":"21"},{"size":234,"mtime":1634783849469,"results":"39","hashOfConfig":"21"},{"filePath":"40","messages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},"195y6nq",{"filePath":"43","messages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"45","messages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"47","messages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"49","messages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"42"},{"filePath":"52","messages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"42"},{"filePath":"55","messages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"57","messages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"59","messages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"61","messages":"62","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"63","messages":"64","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"65","messages":"66","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"67","messages":"68","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"69","messages":"70","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"42"},{"filePath":"72","messages":"73","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"74","messages":"75","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"42"},{"filePath":"77","messages":"78","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"79","messages":"80","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"81","messages":"82","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\aldur\\Desktop\\final_project\\client\\src\\index.js",[],["83","84"],"C:\\Users\\aldur\\Desktop\\final_project\\client\\src\\App.js",[],"C:\\Users\\aldur\\Desktop\\final_project\\client\\src\\pages\\Home.js",[],"C:\\Users\\aldur\\Desktop\\final_project\\client\\src\\components\\navbar\\index.js",[],"C:\\Users\\aldur\\Desktop\\final_project\\client\\src\\components\\Login\\LoginForm.js",["85","86"],"// see SignupForm.js for comments\nimport React, { useState } from 'react';\nimport { Form, Button, Alert } from 'react-bootstrap';\n\nimport { useMutation } from '@apollo/client';\nimport { LOGIN_USER } from '../../utils/mutations';\n\nimport Auth from '../../utils/auth';\n\nconst LoginForm = () => {\n  const [userFormData, setUserFormData] = useState({ email: '', password: '' });\n  const [validated] = useState(false);\n  const [showAlert, setShowAlert] = useState(false);\n  const [login, { error, data }] = useMutation(LOGIN_USER);\n\n  const handleInputChange = (event) => {\n    const { name, value } = event.target;\n    setUserFormData({ ...userFormData, [name]: value });\n  };\n\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n\n    const form = event.currentTarget;\n    if (form.checkValidity() === false) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n\n    try {\n      const { data } = await login({\n        variables: { ...userFormData },\n      });\n\n      Auth.login(data.login.token);\n    } catch (err) {\n      console.error(err);\n      setShowAlert(true);\n    }\n\n    setUserFormData({\n      username: '',\n      email: '',\n      password: '',\n    });\n  };\n\n  return (\n    <>\n      <Form noValidate validated={validated} onSubmit={handleFormSubmit}>\n        <Alert dismissible onClose={() => setShowAlert(false)} show={showAlert} variant='danger'>\n          Something went wrong with your login credentials!\n        </Alert>\n        <Form.Group>\n          <Form.Label htmlFor='email'>Email</Form.Label>\n          <Form.Control\n            type='text'\n            placeholder='Your email'\n            name='email'\n            onChange={handleInputChange}\n            value={userFormData.email}\n            required\n          />\n          <Form.Control.Feedback type='invalid'>Email is required!</Form.Control.Feedback>\n        </Form.Group>\n\n        <Form.Group>\n          <Form.Label htmlFor='password'>Password</Form.Label>\n          <Form.Control\n            type='password'\n            placeholder='Your password'\n            name='password'\n            onChange={handleInputChange}\n            value={userFormData.password}\n            required\n          />\n          <Form.Control.Feedback type='invalid'>Password is required!</Form.Control.Feedback>\n        </Form.Group>\n        <Button\n          disabled={!(userFormData.email && userFormData.password)}\n          type='submit'\n          variant='success'>\n          Submit\n        </Button>\n      </Form>\n    </>\n  );\n};\n\nexport default LoginForm;\n","C:\\Users\\aldur\\Desktop\\final_project\\client\\src\\components\\Login\\SignupForm.js",["87","88"],"import React, { useState } from 'react';\nimport { Form, Button, Alert } from 'react-bootstrap';\n\nimport { useMutation } from '@apollo/client';\nimport { ADD_USER } from '../../utils/mutations';\nimport Auth from '../../utils/auth';\n\nconst SignupForm = () => {\n  const [userFormData, setUserFormData] = useState({ email: '', password: '', name:'', phoneNumber:'', address: '' });\n  const [validated] = useState(false);\n  const [showAlert, setShowAlert] = useState(false);\n\n  const [addUser, { error, data }] = useMutation(ADD_USER);\n\n  const handleInputChange = (event) => {\n    const { name, value } = event.target;\n    setUserFormData({ ...userFormData, [name]: value });\n  };\n\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n\n    const form = event.currentTarget;\n    if (form.checkValidity() === false) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n\n    try {\n      const { data } = await addUser({\n        variables: { ...userFormData },\n      });\n\n      Auth.login(data.addUser.token);\n    } catch (err) {\n      console.error(err);\n      setShowAlert(true);\n    }\n\n    setUserFormData({\n      email: '',\n      password: '',\n      name:'', \n      phoneNumber:'', \n      address: '' \n    });\n  };\n\n  return (\n    <>\n      {/* This is needed for the validation functionality above */}\n      <Form noValidate validated={validated} onSubmit={handleFormSubmit}>\n        {/* show alert if server response is bad */}\n        <Alert dismissible onClose={() => setShowAlert(false)} show={showAlert} variant='danger'>\n          Something went wrong with your signup!\n        </Alert>\n\n        <Form.Group>\n          <Form.Label htmlFor='email'>Email</Form.Label>\n          <Form.Control\n            type='email'\n            placeholder='Your email address'\n            name='email'\n            onChange={handleInputChange}\n            value={userFormData.email}\n            required\n          />\n          <Form.Control.Feedback type='invalid'>Email is required!</Form.Control.Feedback>\n        </Form.Group>\n\n        <Form.Group>\n          <Form.Label htmlFor='password'>Password</Form.Label>\n          <Form.Control\n            type='password'\n            placeholder='Your password'\n            name='password'\n            onChange={handleInputChange}\n            value={userFormData.password}\n            required\n          />\n          <Form.Control.Feedback type='invalid'>Password is required!</Form.Control.Feedback>\n        </Form.Group>\n\n        <Form.Group>\n          <Form.Label htmlFor='name'>Full name</Form.Label>\n          <Form.Control\n            type='text'\n            placeholder='Your full name'\n            name='name'\n            onChange={handleInputChange}\n            value={userFormData.name}\n            required\n          />\n          <Form.Control.Feedback type='invalid'>Name is required!</Form.Control.Feedback>\n        </Form.Group>\n\n        <Form.Group>\n          <Form.Label htmlFor='phoneNumber'>Phone number</Form.Label>\n          <Form.Control\n            type='text'\n            placeholder='Your phone number'\n            name='phoneNumber'\n            onChange={handleInputChange}\n            value={userFormData.phoneNumber}\n            required\n          />\n          <Form.Control.Feedback type='invalid'>Number is required!</Form.Control.Feedback>\n        </Form.Group>\n\n        <Form.Group>\n          <Form.Label htmlFor='address'>Address</Form.Label>\n          <Form.Control\n            type='text'\n            placeholder='Your address'\n            name='address'\n            onChange={handleInputChange}\n            value={userFormData.address}\n            required\n          />\n          <Form.Control.Feedback type='invalid'>Address is required!</Form.Control.Feedback>\n        </Form.Group>\n        <Button\n          disabled={!(userFormData.email && userFormData.password && userFormData.name && userFormData.phoneNumber && userFormData.address)}\n          type='submit'\n          variant='success'>\n          Submit\n        </Button>\n      </Form>\n    </>\n  );\n};\n\nexport default SignupForm;\n","C:\\Users\\aldur\\Desktop\\final_project\\client\\src\\utils\\auth.js",[],"C:\\Users\\aldur\\Desktop\\final_project\\client\\src\\utils\\mutations.js",[],"C:\\Users\\aldur\\Desktop\\final_project\\client\\src\\utils\\queries.js",[],"C:\\Users\\aldur\\Desktop\\final_project\\client\\src\\components\\ProductList\\index.js",["89","90"],"C:\\Users\\aldur\\Desktop\\final_project\\client\\src\\components\\Myinfobar\\index.js",[],"C:\\Users\\aldur\\Desktop\\final_project\\client\\src\\components\\MyinfoList\\index.js",[],"C:\\Users\\aldur\\Desktop\\final_project\\client\\src\\components\\OrderList\\index.js",[],"C:\\Users\\aldur\\Desktop\\final_project\\client\\src\\pages\\MyAccount.js",["91"],"import React, { useState } from \"react\";\r\nimport { useQuery } from '@apollo/client';\r\n\r\nimport Myinfobar from '../components/Myinfobar';\r\nimport Myinfolist from '../components/MyinfoList';\r\nimport Orderlist from '../components/OrderList';\r\n\r\nimport { QUERY_ME } from '../utils/queries';\r\n\r\nconst MyAccount = () => {\r\n  const { loading , data } = useQuery(QUERY_ME);\r\n  const me = data?.me || [];\r\n  const [currentPage, setCurrentPage] = useState('Myinfo');\r\n\r\n  // This method is checking to see what the value of `currentPage` is. Depending on the value of currentPage, we return the corresponding component to render.\r\n  const renderPage = () => {\r\n    if (currentPage === 'Myinfo') {\r\n      return <Myinfolist me={me}/>;\r\n    }\r\n    if (currentPage === 'Order') {\r\n      return <Orderlist me={me}/>;\r\n    }\r\n  };\r\n\r\n  const handlePageChange = (page) => setCurrentPage(page);\r\n\r\n  return (\r\n    <main>\r\n      <div className=\"flex-row justify-center\">\r\n        <div className=\"col-2 border-right border-secondary min-vh-100\">\r\n          <Myinfobar currentPage={currentPage} handlePageChange={handlePageChange}/>\r\n        </div>\r\n        <div className=\"col-10\">\r\n          {renderPage()}\r\n        </div>    \r\n      </div>\r\n    </main>\r\n  );\r\n};\r\n\r\nexport default MyAccount;","C:\\Users\\aldur\\Desktop\\final_project\\client\\src\\components\\Navbar\\index.js",[],"C:\\Users\\aldur\\Desktop\\final_project\\client\\src\\pages\\Cart.js",["92","93"],"import React, { useState } from \"react\";\r\nimport { useQuery } from '@apollo/client';\r\n\r\n\r\nimport CartList from '../components/CartList';\r\nimport { QUERY_ME } from '../utils/queries';\r\n\r\nconst Cart = () => {\r\n  const { loading, data } = useQuery(QUERY_ME);\r\n  const me = data?.me.cart || [];\r\n\r\n  return (\r\n    <main>\r\n      <div className=\"flex-row justify-center\">\r\n        <CartList me={me}/>  \r\n      </div>\r\n    </main>\r\n  );\r\n};\r\n\r\nexport default Cart;","C:\\Users\\aldur\\Desktop\\final_project\\client\\src\\components\\CartList\\index.js",["94","95","96","97"],"C:\\Users\\aldur\\Desktop\\final_project\\client\\src\\pages\\Success.js",["98","99"],"C:\\Users\\aldur\\Desktop\\final_project\\client\\src\\components\\Jumbotron\\index.js",[],{"ruleId":"100","replacedBy":"101"},{"ruleId":"102","replacedBy":"103"},{"ruleId":"104","severity":1,"message":"105","line":14,"column":19,"nodeType":"106","messageId":"107","endLine":14,"endColumn":24},{"ruleId":"104","severity":1,"message":"108","line":14,"column":26,"nodeType":"106","messageId":"107","endLine":14,"endColumn":30},{"ruleId":"104","severity":1,"message":"105","line":13,"column":21,"nodeType":"106","messageId":"107","endLine":13,"endColumn":26},{"ruleId":"104","severity":1,"message":"108","line":13,"column":28,"nodeType":"106","messageId":"107","endLine":13,"endColumn":32},{"ruleId":"104","severity":1,"message":"105","line":11,"column":21,"nodeType":"106","messageId":"107","endLine":11,"endColumn":26},{"ruleId":"104","severity":1,"message":"108","line":17,"column":15,"nodeType":"106","messageId":"107","endLine":17,"endColumn":19},{"ruleId":"104","severity":1,"message":"109","line":11,"column":11,"nodeType":"106","messageId":"107","endLine":11,"endColumn":18},{"ruleId":"104","severity":1,"message":"110","line":1,"column":17,"nodeType":"106","messageId":"107","endLine":1,"endColumn":25},{"ruleId":"104","severity":1,"message":"109","line":9,"column":11,"nodeType":"106","messageId":"107","endLine":9,"endColumn":18},{"ruleId":"104","severity":1,"message":"105","line":13,"column":24,"nodeType":"106","messageId":"107","endLine":13,"endColumn":29},{"ruleId":"104","severity":1,"message":"111","line":17,"column":10,"nodeType":"106","messageId":"107","endLine":17,"endColumn":18},{"ruleId":"104","severity":1,"message":"112","line":17,"column":22,"nodeType":"106","messageId":"107","endLine":17,"endColumn":28},{"ruleId":"104","severity":1,"message":"113","line":31,"column":15,"nodeType":"106","messageId":"107","endLine":31,"endColumn":20},{"ruleId":"104","severity":1,"message":"109","line":9,"column":11,"nodeType":"106","messageId":"107","endLine":9,"endColumn":18},{"ruleId":"104","severity":1,"message":"108","line":25,"column":19,"nodeType":"106","messageId":"107","endLine":25,"endColumn":23},"no-native-reassign",["114"],"no-negated-in-lhs",["115"],"no-unused-vars","'error' is assigned a value but never used.","Identifier","unusedVar","'data' is assigned a value but never used.","'loading' is assigned a value but never used.","'useState' is defined but never used.","'addOrder' is assigned a value but never used.","'error2' is assigned a value but never used.","'data2' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]